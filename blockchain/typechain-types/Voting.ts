/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProposal"
      | "admin"
      | "createElection"
      | "electionProposals"
      | "elections"
      | "finalizeResult"
      | "getResult"
      | "getVoteCounts"
      | "nextElectionId"
      | "registerVoter"
      | "terminateVoting"
      | "terminated"
      | "vote"
      | "voters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ElectionCreated" | "VoteRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextElectionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextElectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "terminated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [electionId: BigNumberish, title: string];
  export type OutputTuple = [electionId: bigint, title: string];
  export interface OutputObject {
    electionId: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteRecordedEvent {
  export type InputTuple = [
    voter: AddressLike,
    electionId: BigNumberish,
    proposalIndex: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    electionId: bigint,
    proposalIndex: bigint
  ];
  export interface OutputObject {
    voter: string;
    electionId: bigint;
    proposalIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProposal: TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  createElection: TypedContractMethod<
    [_title: string, _startTime: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  electionProposals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint] & {
        index: bigint;
        name: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string] & {
        electionId: bigint;
        title: string;
        startTime: bigint;
        duration: bigint;
        terminated: boolean;
        result: string;
      }
    ],
    "view"
  >;

  finalizeResult: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getResult: TypedContractMethod<[_electionId: BigNumberish], [string], "view">;

  getVoteCounts: TypedContractMethod<
    [_electionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  nextElectionId: TypedContractMethod<[], [bigint], "view">;

  registerVoter: TypedContractMethod<
    [_electionId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;

  terminateVoting: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  terminated: TypedContractMethod<[], [boolean], "view">;

  vote: TypedContractMethod<
    [_electionId: BigNumberish, _proposalIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isRegistered: boolean;
        hasVoted: boolean;
        vote: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProposal"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [_title: string, _startTime: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "electionProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint] & {
        index: bigint;
        name: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string] & {
        electionId: bigint;
        title: string;
        startTime: bigint;
        duration: bigint;
        terminated: boolean;
        result: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "finalizeResult"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<[_electionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVoteCounts"
  ): TypedContractMethod<[_electionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextElectionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_electionId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "terminateVoting"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "terminated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _proposalIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, bigint] & {
        isRegistered: boolean;
        hasVoted: boolean;
        vote: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteRecorded"
  ): TypedContractEvent<
    VoteRecordedEvent.InputTuple,
    VoteRecordedEvent.OutputTuple,
    VoteRecordedEvent.OutputObject
  >;

  filters: {
    "ElectionCreated(uint256,string)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "VoteRecorded(address,uint256,uint256)": TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
    VoteRecorded: TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
  };
}
