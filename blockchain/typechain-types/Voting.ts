/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Voting {
  export type ProposalStruct = {
    index: BigNumberish;
    name: string;
    voteCount: BigNumberish;
  };

  export type ProposalStructOutput = [
    index: bigint,
    name: string,
    voteCount: bigint
  ] & { index: bigint; name: string; voteCount: bigint };

  export type VoterStruct = {
    isRegistered: boolean;
    hasVoted: boolean;
    vote: BigNumberish;
    voteHash: BytesLike;
  };

  export type VoterStructOutput = [
    isRegistered: boolean,
    hasVoted: boolean,
    vote: bigint,
    voteHash: string
  ] & {
    isRegistered: boolean;
    hasVoted: boolean;
    vote: bigint;
    voteHash: string;
  };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProposal"
      | "ballots"
      | "commitVote"
      | "createBallot"
      | "finalizeResult"
      | "getCommitment"
      | "getProposal"
      | "getResult"
      | "getVoteCounts"
      | "getVoter"
      | "nextBallotId"
      | "registerVoter"
      | "revealVote"
      | "terminateVoting"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BallotCreated" | "VoteRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ballots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBallot",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBallotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateVoting",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ballots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBallotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateVoting",
    data: BytesLike
  ): Result;
}

export namespace BallotCreatedEvent {
  export type InputTuple = [ballotId: BigNumberish, title: string];
  export type OutputTuple = [ballotId: bigint, title: string];
  export interface OutputObject {
    ballotId: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteRecordedEvent {
  export type InputTuple = [
    voter: AddressLike,
    ballotId: BigNumberish,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    voter: string,
    ballotId: bigint,
    commitment: string
  ];
  export interface OutputObject {
    voter: string;
    ballotId: bigint;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProposal: TypedContractMethod<
    [_ballotId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  ballots: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string, string, bigint] & {
        ballotId: bigint;
        title: string;
        startTime: bigint;
        duration: bigint;
        terminated: boolean;
        result: string;
        admin: string;
        proposalCount: bigint;
      }
    ],
    "view"
  >;

  commitVote: TypedContractMethod<
    [_ballotId: BigNumberish, _commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  createBallot: TypedContractMethod<
    [_title: string, _startTime: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalizeResult: TypedContractMethod<
    [_ballotId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCommitment: TypedContractMethod<
    [_ballotId: BigNumberish, _commitment: BytesLike],
    [boolean],
    "view"
  >;

  getProposal: TypedContractMethod<
    [_ballotId: BigNumberish, _proposalId: BigNumberish],
    [Voting.ProposalStructOutput],
    "view"
  >;

  getResult: TypedContractMethod<[_ballotId: BigNumberish], [string], "view">;

  getVoteCounts: TypedContractMethod<
    [_ballotId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getVoter: TypedContractMethod<
    [_ballotId: BigNumberish, _voterAddress: AddressLike],
    [Voting.VoterStructOutput],
    "view"
  >;

  nextBallotId: TypedContractMethod<[], [bigint], "view">;

  registerVoter: TypedContractMethod<
    [_ballotId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;

  revealVote: TypedContractMethod<
    [_ballotId: BigNumberish, _proposalId: BigNumberish, _salt: BytesLike],
    [void],
    "nonpayable"
  >;

  terminateVoting: TypedContractMethod<
    [_ballotId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProposal"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ballots"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string, string, bigint] & {
        ballotId: bigint;
        title: string;
        startTime: bigint;
        duration: bigint;
        terminated: boolean;
        result: string;
        admin: string;
        proposalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitVote"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBallot"
  ): TypedContractMethod<
    [_title: string, _startTime: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeResult"
  ): TypedContractMethod<[_ballotId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCommitment"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _commitment: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _proposalId: BigNumberish],
    [Voting.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<[_ballotId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVoteCounts"
  ): TypedContractMethod<[_ballotId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVoter"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _voterAddress: AddressLike],
    [Voting.VoterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextBallotId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealVote"
  ): TypedContractMethod<
    [_ballotId: BigNumberish, _proposalId: BigNumberish, _salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "terminateVoting"
  ): TypedContractMethod<[_ballotId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BallotCreated"
  ): TypedContractEvent<
    BallotCreatedEvent.InputTuple,
    BallotCreatedEvent.OutputTuple,
    BallotCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteRecorded"
  ): TypedContractEvent<
    VoteRecordedEvent.InputTuple,
    VoteRecordedEvent.OutputTuple,
    VoteRecordedEvent.OutputObject
  >;

  filters: {
    "BallotCreated(uint256,string)": TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;
    BallotCreated: TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;

    "VoteRecorded(address,uint256,bytes32)": TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
    VoteRecorded: TypedContractEvent<
      VoteRecordedEvent.InputTuple,
      VoteRecordedEvent.OutputTuple,
      VoteRecordedEvent.OutputObject
    >;
  };
}
