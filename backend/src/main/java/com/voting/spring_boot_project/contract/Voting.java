package com.voting.spring_boot_project.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class Voting extends Contract {
    public static final String BINARY = "60806040526001600355348015601457600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506134a4806100656000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638a241f4c116100a25780639fdb1457116100715780639fdb14571461030b578063aba2100914610327578063b023a1ca14610357578063d3c9a74114610373578063dc6bfbb51461038f57610116565b80638a241f4c1461025f5780638f47b1461461028f57806394c790bb146102bf578063995e4339146102db57610116565b806355b7c597116100e957806355b7c5971461018b5780635c632b38146101bd57806370292a02146101f35780637465e7d41461020f578063779552451461024157610116565b806311bb51a41461011b5780632ad1f1db146101375780632ec7d5ae1461015357806350d915831461016f575b600080fd5b61013560048036038101906101309190612519565b6103ad565b005b610151600480360381019061014c91906125e8565b61091e565b005b61016d60048036038101906101689190612628565b610a2b565b005b61018960048036038101906101849190612655565b610dec565b005b6101a560048036038101906101a091906125e8565b611179565b6040516101b493929190612736565b60405180910390f35b6101d760048036038101906101d29190612628565b611238565b6040516101ea979695949392919061279e565b60405180910390f35b61020d60048036038101906102089190612814565b61132f565b005b61022960048036038101906102249190612870565b611445565b604051610238939291906128b0565b60405180910390f35b610249611496565b60405161025691906128e7565b60405180910390f35b61027960048036038101906102749190612628565b6114bc565b60405161028691906129c0565b60405180910390f35b6102a960048036038101906102a49190612870565b611663565b6040516102b69190612a33565b60405180910390f35b6102d960048036038101906102d49190612870565b61170e565b005b6102f560048036038101906102f09190612628565b6119d2565b60405161030291906129c0565b60405180910390f35b61032560048036038101906103209190612870565b611b13565b005b610341600480360381019061033c91906125e8565b611dd7565b60405161034e9190612ae8565b60405180910390f35b610371600480360381019061036c91906125e8565b611ebc565b005b61038d60048036038101906103889190612628565b61200b565b005b6103976120cc565b6040516103a49190612b0a565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490612b97565b60405180910390fd5b42841161047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047690612c03565b60405180910390fd5b60018251116104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba90612c6f565b60405180910390fd5b6000815111610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe90612cdb565b60405180910390fd5b60006003600081548092919061051c90612d2a565b91905055905060008060008381526020019081526020016000209050818160000181905550868160010190816105529190612f7e565b5085816002018190555084816003018190555060008160040160006101000a81548160ff021916908315150217905550835167ffffffffffffffff81111561059d5761059c6121b1565b5b6040519080825280602002602001820160405280156105cb5781602001602082028036833780820191505090505b508160050190805190602001906105e39291906120d2565b50338160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508351816007018190555060005b845181101561072657604051806060016040528082815260200186838151811061066157610660613050565b5b6020026020010151815260200160008152506002600085815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010190816106b69190612f7e565b50604082015181600201559050507f7aade497c2cd4241d757f694370d0e4a250bfa251b3ab287406b2ab58d3fdad683828784815181106106fa576106f9613050565b5b60200260200101516040516107119392919061307f565b60405180910390a18080600101915050610634565b5060005b83518110156108db57600084828151811061074857610747613050565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890613109565b60405180910390fd5b6001600085815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990613175565b60405180910390fd5b600180600086815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555050808060010191505061072a565b507f0db6f49479669554c6eefe11608543e654d387ff0d23b6b36f365fd261f6a4e0828860405161090d929190613195565b60405180910390a150505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a590612b97565b60405180910390fd5b816000806000838152602001908152602001600020905080600201544210610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290613211565b60405180910390fd5b826000808681526020019081526020016000206003018190555050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab290612b97565b60405180910390fd5b806000806000838152602001908152602001600020905080600301548160020154610ae69190613231565b421015610b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1f906132b1565b60405180910390fd5b8260008082815260200190815260200160002060040160009054906101000a900460ff1615610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b839061331d565b60405180910390fd5b60008080600087815260200190815260200160002060070154905060005b81811015610c195782600260008981526020019081526020016000206000838152602001908152602001600020600201541115610c0c576002600088815260200190815260200160002060008281526020019081526020016000206002015492505b8080600101915050610baa565b5060008167ffffffffffffffff811115610c3657610c356121b1565b5b604051908082528060200260200182016040528015610c645781602001602082028036833780820191505090505b5090506000805b83811015610cdd5784600260008b815260200190815260200160002060008381526020019081526020016000206002015403610cd05780838381518110610cb557610cb4613050565b5b6020026020010181815250508180610ccc90612d2a565b9250505b8080600101915050610c6b565b5060008167ffffffffffffffff811115610cfa57610cf96121b1565b5b604051908082528060200260200182016040528015610d285781602001602082028036833780820191505090505b50905060005b82811015610d7d57838181518110610d4957610d48613050565b5b6020026020010151828281518110610d6457610d63613050565b5b6020026020010181815250508080600101915050610d2e565b50806000808b81526020019081526020016000206005019080519060200190610da79291906120d2565b507fc9e72c5cb44207ce2335ae5d4c335ffa4f1689a5cedfce37f4b3e579bc5737c68982604051610dd992919061333d565b60405180910390a1505050505050505050565b8260008082815260200190815260200160002060040160009054906101000a900460ff1615610e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e479061331d565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612b97565b60405180910390fd5b6001600085815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f77906133b9565b60405180910390fd5b6001600085815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890613425565b60405180910390fd5b600180600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550826001600086815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600260008681526020019081526020016000206000858152602001908152602001600020600201600082825461111c9190613231565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167f30befe21dd895620c3a73403f6e63aea5c3c6729202dbdc8eef2e8f8bd78de80858560405161116b929190613445565b60405180910390a250505050565b6002602052816000526040600020602052806000526040600020600091509150508060000154908060010180546111af90612da1565b80601f01602080910402602001604051908101604052809291908181526020018280546111db90612da1565b80156112285780601f106111fd57610100808354040283529160200191611228565b820191906000526020600020905b81548152906001019060200180831161120b57829003601f168201915b5050505050908060020154905083565b600060205280600052604060002060009150905080600001549080600101805461126190612da1565b80601f016020809104026020016040519081016040528092919081815260200182805461128d90612da1565b80156112da5780601f106112af576101008083540402835291602001916112da565b820191906000526020600020905b8154815290600101906020018083116112bd57829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff16908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070154905087565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b690612b97565b60405180910390fd5b81600080600083815260200190815260200160002090508060020154421061141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390613211565b60405180910390fd5b82600080868152602001908152602001600020600101908161143e9190612f7e565b5050505050565b6001602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60608160008060008381526020019081526020016000209050806003015481600201546114e99190613231565b42101561152b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611522906132b1565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff161561158f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115869061331d565b60405180910390fd5b600080600087815260200190815260200160002060070154905060008167ffffffffffffffff8111156115c5576115c46121b1565b5b6040519080825280602002602001820160405280156115f35781602001602082028036833780820191505090505b50905060005b82811015611655576002600089815260200190815260200160002060008281526020019081526020016000206002015482828151811061163c5761163b613050565b5b60200260200101818152505080806001019150506115f9565b508095505050505050919050565b61166b61211f565b6001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff16151515158152602001600182015481525050905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179590612b97565b60405180910390fd5b8160008060008381526020019081526020016000209050806002015442106117fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f290613211565b60405180910390fd5b6001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161561189c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189390613175565b60405180910390fd5b600180600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555060006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505050565b60608160008060008381526020019081526020016000209050806003015481600201546119ff9190613231565b421015611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a38906132b1565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff1615611aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9c9061331d565b60405180910390fd5b600080868152602001908152602001600020600501805480602002602001604051908101604052809291908181526020018280548015611b0457602002820191906000526020600020905b815481526020019060010190808311611af0575b50505050509350505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9a90612b97565b60405180910390fd5b816000806000838152602001908152602001600020905080600201544210611c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf790613211565b60405180910390fd5b6001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c97906133b9565b60405180910390fd5b60006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555060006001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505050565b611ddf612144565b60026000848152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182018054611e2890612da1565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5490612da1565b8015611ea15780601f10611e7657610100808354040283529160200191611ea1565b820191906000526020600020905b815481529060010190602001808311611e8457829003601f168201915b50505050508152602001600282015481525050905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4390612b97565b60405180910390fd5b816000806000838152602001908152602001600020905080600201544210611fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa090613211565b60405180910390fd5b428311611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe290612c03565b60405180910390fd5b826000808681526020019081526020016000206002018190555050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461209b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209290612b97565b60405180910390fd5b600160008083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b60035481565b82805482825590600052602060002090810192821561210e579160200282015b8281111561210d5782518255916020019190600101906120f2565b5b50905061211b9190612165565b5090565b6040518060600160405280600015158152602001600015158152602001600081525090565b60405180606001604052806000815260200160608152602001600081525090565b5b8082111561217e576000816000905550600101612166565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121e9826121a0565b810181811067ffffffffffffffff82111715612208576122076121b1565b5b80604052505050565b600061221b612182565b905061222782826121e0565b919050565b600067ffffffffffffffff821115612247576122466121b1565b5b612250826121a0565b9050602081019050919050565b82818337600083830152505050565b600061227f61227a8461222c565b612211565b90508281526020810184848401111561229b5761229a61219b565b5b6122a684828561225d565b509392505050565b600082601f8301126122c3576122c2612196565b5b81356122d384826020860161226c565b91505092915050565b6000819050919050565b6122ef816122dc565b81146122fa57600080fd5b50565b60008135905061230c816122e6565b92915050565b600067ffffffffffffffff82111561232d5761232c6121b1565b5b602082029050602081019050919050565b600080fd5b600061235661235184612312565b612211565b905080838252602082019050602084028301858111156123795761237861233e565b5b835b818110156123c057803567ffffffffffffffff81111561239e5761239d612196565b5b8086016123ab89826122ae565b8552602085019450505060208101905061237b565b5050509392505050565b600082601f8301126123df576123de612196565b5b81356123ef848260208601612343565b91505092915050565b600067ffffffffffffffff821115612413576124126121b1565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b811461246a57600080fd5b50565b60008135905061247c81612456565b92915050565b6000612495612490846123f8565b612211565b905080838252602082019050602084028301858111156124b8576124b761233e565b5b835b818110156124e157806124cd888261246d565b8452602084019350506020810190506124ba565b5050509392505050565b600082601f830112612500576124ff612196565b5b8135612510848260208601612482565b91505092915050565b600080600080600060a086880312156125355761253461218c565b5b600086013567ffffffffffffffff81111561255357612552612191565b5b61255f888289016122ae565b9550506020612570888289016122fd565b9450506040612581888289016122fd565b935050606086013567ffffffffffffffff8111156125a2576125a1612191565b5b6125ae888289016123ca565b925050608086013567ffffffffffffffff8111156125cf576125ce612191565b5b6125db888289016124eb565b9150509295509295909350565b600080604083850312156125ff576125fe61218c565b5b600061260d858286016122fd565b925050602061261e858286016122fd565b9150509250929050565b60006020828403121561263e5761263d61218c565b5b600061264c848285016122fd565b91505092915050565b60008060006060848603121561266e5761266d61218c565b5b600061267c868287016122fd565b935050602061268d868287016122fd565b925050604061269e8682870161246d565b9150509250925092565b6126b1816122dc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126f15780820151818401526020810190506126d6565b60008484015250505050565b6000612708826126b7565b61271281856126c2565b93506127228185602086016126d3565b61272b816121a0565b840191505092915050565b600060608201905061274b60008301866126a8565b818103602083015261275d81856126fd565b905061276c60408301846126a8565b949350505050565b60008115159050919050565b61278981612774565b82525050565b61279881612444565b82525050565b600060e0820190506127b3600083018a6126a8565b81810360208301526127c581896126fd565b90506127d460408301886126a8565b6127e160608301876126a8565b6127ee6080830186612780565b6127fb60a083018561278f565b61280860c08301846126a8565b98975050505050505050565b6000806040838503121561282b5761282a61218c565b5b6000612839858286016122fd565b925050602083013567ffffffffffffffff81111561285a57612859612191565b5b612866858286016122ae565b9150509250929050565b600080604083850312156128875761288661218c565b5b6000612895858286016122fd565b92505060206128a68582860161246d565b9150509250929050565b60006060820190506128c56000830186612780565b6128d26020830185612780565b6128df60408301846126a8565b949350505050565b60006020820190506128fc600083018461278f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612937816122dc565b82525050565b6000612949838361292e565b60208301905092915050565b6000602082019050919050565b600061296d82612902565b612977818561290d565b93506129828361291e565b8060005b838110156129b357815161299a888261293d565b97506129a583612955565b925050600181019050612986565b5085935050505092915050565b600060208201905081810360008301526129da8184612962565b905092915050565b6129eb81612774565b82525050565b606082016000820151612a0760008501826129e2565b506020820151612a1a60208501826129e2565b506040820151612a2d604085018261292e565b50505050565b6000606082019050612a4860008301846129f1565b92915050565b600082825260208201905092915050565b6000612a6a826126b7565b612a748185612a4e565b9350612a848185602086016126d3565b612a8d816121a0565b840191505092915050565b6000606083016000830151612ab0600086018261292e565b5060208301518482036020860152612ac88282612a5f565b9150506040830151612add604086018261292e565b508091505092915050565b60006020820190508181036000830152612b028184612a98565b905092915050565b6000602082019050612b1f60008301846126a8565b92915050565b7f4f6e6c7920636f6e74726163742061646d696e2063616e20706572666f726d2060008201527f7468697320616374696f6e000000000000000000000000000000000000000000602082015250565b6000612b81602b836126c2565b9150612b8c82612b25565b604082019050919050565b60006020820190508181036000830152612bb081612b74565b9050919050565b7f53746172742074696d65206d75737420626520696e2074686520667574757265600082015250565b6000612bed6020836126c2565b9150612bf882612bb7565b602082019050919050565b60006020820190508181036000830152612c1c81612be0565b9050919050565b7f4d7573742068617665206174206c656173742074776f2070726f706f73616c73600082015250565b6000612c596020836126c2565b9150612c6482612c23565b602082019050919050565b60006020820190508181036000830152612c8881612c4c565b9050919050565b7f4d7573742068617665206174206c65617374206f6e6520766f74657200000000600082015250565b6000612cc5601c836126c2565b9150612cd082612c8f565b602082019050919050565b60006020820190508181036000830152612cf481612cb8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d35826122dc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d6757612d66612cfb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612db957607f821691505b602082108103612dcc57612dcb612d72565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612df7565b612e3e8683612df7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e7b612e76612e71846122dc565b612e56565b6122dc565b9050919050565b6000819050919050565b612e9583612e60565b612ea9612ea182612e82565b848454612e04565b825550505050565b600090565b612ebe612eb1565b612ec9818484612e8c565b505050565b5b81811015612eed57612ee2600082612eb6565b600181019050612ecf565b5050565b601f821115612f3257612f0381612dd2565b612f0c84612de7565b81016020851015612f1b578190505b612f2f612f2785612de7565b830182612ece565b50505b505050565b600082821c905092915050565b6000612f5560001984600802612f37565b1980831691505092915050565b6000612f6e8383612f44565b9150826002028217905092915050565b612f87826126b7565b67ffffffffffffffff811115612fa057612f9f6121b1565b5b612faa8254612da1565b612fb5828285612ef1565b600060209050601f831160018114612fe85760008415612fd6578287015190505b612fe08582612f62565b865550613048565b601f198416612ff686612dd2565b60005b8281101561301e57848901518255600182019150602085019450602081019050612ff9565b8683101561303b5784890151613037601f891682612f44565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060608201905061309460008301866126a8565b6130a160208301856126a8565b81810360408301526130b381846126fd565b9050949350505050565b7f496e76616c696420766f74657220616464726573730000000000000000000000600082015250565b60006130f36015836126c2565b91506130fe826130bd565b602082019050919050565b60006020820190508181036000830152613122816130e6565b9050919050565b7f566f74657220697320616c726561647920726567697374657265640000000000600082015250565b600061315f601b836126c2565b915061316a82613129565b602082019050919050565b6000602082019050818103600083015261318e81613152565b9050919050565b60006040820190506131aa60008301856126a8565b81810360208301526131bc81846126fd565b90509392505050565b7f566f74696e672068617320616c72656164792073746172746564000000000000600082015250565b60006131fb601a836126c2565b9150613206826131c5565b602082019050919050565b6000602082019050818103600083015261322a816131ee565b9050919050565b600061323c826122dc565b9150613247836122dc565b925082820190508082111561325f5761325e612cfb565b5b92915050565b7f566f74696e6720706572696f6420686173206e6f7420656e6465642079657400600082015250565b600061329b601f836126c2565b91506132a682613265565b602082019050919050565b600060208201905081810360008301526132ca8161328e565b9050919050565b7f566f74696e67206973207465726d696e61746564000000000000000000000000600082015250565b60006133076014836126c2565b9150613312826132d1565b602082019050919050565b60006020820190508181036000830152613336816132fa565b9050919050565b600060408201905061335260008301856126a8565b81810360208301526133648184612962565b90509392505050565b7f566f746572206973206e6f742072656769737465726564000000000000000000600082015250565b60006133a36017836126c2565b91506133ae8261336d565b602082019050919050565b600060208201905081810360008301526133d281613396565b9050919050565b7f566f7465722068617320616c726561647920766f746564000000000000000000600082015250565b600061340f6017836126c2565b915061341a826133d9565b602082019050919050565b6000602082019050818103600083015261343e81613402565b9050919050565b600060408201905061345a60008301856126a8565b61346760208301846126a8565b939250505056fea2646970667358221220d3bac0bc2a792c9500728dd7d8210b86e0321c0ea80dd60634847c99c388983f64736f6c634300081c0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALLOTS = "ballots";

    public static final String FUNC_CONTRACTADMIN = "contractAdmin";

    public static final String FUNC_CREATEBALLOT = "createBallot";

    public static final String FUNC_FINALIZERESULT = "finalizeResult";

    public static final String FUNC_GETPROPOSAL = "getProposal";

    public static final String FUNC_GETRESULT = "getResult";

    public static final String FUNC_GETVOTECOUNTS = "getVoteCounts";

    public static final String FUNC_GETVOTER = "getVoter";

    public static final String FUNC_NEXTBALLOTID = "nextBallotId";

    public static final String FUNC_PROPOSALSBYBALLOT = "proposalsByBallot";

    public static final String FUNC_REGISTERVOTER = "registerVoter";

    public static final String FUNC_TERMINATEVOTING = "terminateVoting";

    public static final String FUNC_UNREGISTERVOTER = "unregisterVoter";

    public static final String FUNC_UPDATEBALLOTTITLE = "updateBallotTitle";

    public static final String FUNC_UPDATEDURATION = "updateDuration";

    public static final String FUNC_UPDATESTARTTIME = "updateStartTime";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERSBYBALLOT = "votersByBallot";

    public static final Event BALLOTCREATED_EVENT = new Event("BallotCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BALLOTRESULTFINALIZED_EVENT = new Event("BallotResultFinalized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTERECORDED_EVENT = new Event("VoteRecorded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<BallotCreatedEventResponse> getBallotCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BALLOTCREATED_EVENT, transactionReceipt);
        ArrayList<BallotCreatedEventResponse> responses = new ArrayList<BallotCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BallotCreatedEventResponse typedResponse = new BallotCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BallotCreatedEventResponse getBallotCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BALLOTCREATED_EVENT, log);
        BallotCreatedEventResponse typedResponse = new BallotCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BallotCreatedEventResponse> ballotCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBallotCreatedEventFromLog(log));
    }

    public Flowable<BallotCreatedEventResponse> ballotCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALLOTCREATED_EVENT));
        return ballotCreatedEventFlowable(filter);
    }

    public static List<BallotResultFinalizedEventResponse> getBallotResultFinalizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BALLOTRESULTFINALIZED_EVENT, transactionReceipt);
        ArrayList<BallotResultFinalizedEventResponse> responses = new ArrayList<BallotResultFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BallotResultFinalizedEventResponse typedResponse = new BallotResultFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.resultProposalIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BallotResultFinalizedEventResponse getBallotResultFinalizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BALLOTRESULTFINALIZED_EVENT, log);
        BallotResultFinalizedEventResponse typedResponse = new BallotResultFinalizedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.resultProposalIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<BallotResultFinalizedEventResponse> ballotResultFinalizedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBallotResultFinalizedEventFromLog(log));
    }

    public Flowable<BallotResultFinalizedEventResponse> ballotResultFinalizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALLOTRESULTFINALIZED_EVENT));
        return ballotResultFinalizedEventFlowable(filter);
    }

    public static List<ProposalCreatedEventResponse> getProposalCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProposalCreatedEventResponse getProposalCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
        ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProposalCreatedEventFromLog(log));
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public static List<VoteRecordedEventResponse> getVoteRecordedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTERECORDED_EVENT, transactionReceipt);
        ArrayList<VoteRecordedEventResponse> responses = new ArrayList<VoteRecordedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteRecordedEventResponse typedResponse = new VoteRecordedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VoteRecordedEventResponse getVoteRecordedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTERECORDED_EVENT, log);
        VoteRecordedEventResponse typedResponse = new VoteRecordedEventResponse();
        typedResponse.log = log;
        typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VoteRecordedEventResponse> voteRecordedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVoteRecordedEventFromLog(log));
    }

    public Flowable<VoteRecordedEventResponse> voteRecordedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTERECORDED_EVENT));
        return voteRecordedEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, Boolean, String, BigInteger>> ballots(
            BigInteger param0) {
        final Function function = new Function(FUNC_BALLOTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, Boolean, String, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, String, BigInteger, BigInteger, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, BigInteger, BigInteger, Boolean, String, BigInteger> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, BigInteger, BigInteger, Boolean, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> contractAdmin() {
        final Function function = new Function(FUNC_CONTRACTADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createBallot(String _title, BigInteger _startTime,
            BigInteger _duration, List<String> _proposalNames, List<String> _voters) {
        final Function function = new Function(
                FUNC_CREATEBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(_duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_proposalNames, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_voters, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeResult(BigInteger _ballotId) {
        final Function function = new Function(
                FUNC_FINALIZERESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Proposal> getProposal(BigInteger _ballotId, BigInteger _proposalId) {
        final Function function = new Function(FUNC_GETPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Proposal>() {}));
        return executeRemoteCallSingleValueReturn(function, Proposal.class);
    }

    public RemoteFunctionCall<List> getResult(BigInteger _ballotId) {
        final Function function = new Function(FUNC_GETRESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getVoteCounts(BigInteger _ballotId) {
        final Function function = new Function(FUNC_GETVOTECOUNTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Voter> getVoter(BigInteger _ballotId, String _voterAddress) {
        final Function function = new Function(FUNC_GETVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Address(160, _voterAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Voter>() {}));
        return executeRemoteCallSingleValueReturn(function, Voter.class);
    }

    public RemoteFunctionCall<BigInteger> nextBallotId() {
        final Function function = new Function(FUNC_NEXTBALLOTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> proposalsByBallot(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_PROPOSALSBYBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> registerVoter(BigInteger _ballotId,
            String voter) {
        final Function function = new Function(
                FUNC_REGISTERVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Address(160, voter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> terminateVoting(BigInteger _ballotId) {
        final Function function = new Function(
                FUNC_TERMINATEVOTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unregisterVoter(BigInteger _ballotId,
            String voter) {
        final Function function = new Function(
                FUNC_UNREGISTERVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Address(160, voter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBallotTitle(BigInteger _ballotId,
            String _newTitle) {
        final Function function = new Function(
                FUNC_UPDATEBALLOTTITLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Utf8String(_newTitle)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDuration(BigInteger _ballotId,
            BigInteger _newDuration) {
        final Function function = new Function(
                FUNC_UPDATEDURATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_newDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateStartTime(BigInteger _ballotId,
            BigInteger _newStartTime) {
        final Function function = new Function(
                FUNC_UPDATESTARTTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_newStartTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _ballotId, BigInteger _proposalId,
            String _voterAddress) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposalId), 
                new org.web3j.abi.datatypes.Address(160, _voterAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<Boolean, Boolean, BigInteger>> votersByBallot(
            BigInteger param0, String param1) {
        final Function function = new Function(FUNC_VOTERSBYBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<Boolean, Boolean, BigInteger>>(function,
                new Callable<Tuple3<Boolean, Boolean, BigInteger>>() {
                    @Override
                    public Tuple3<Boolean, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Proposal extends DynamicStruct {
        public BigInteger index;

        public String name;

        public BigInteger voteCount;

        public Proposal(BigInteger index, String name, BigInteger voteCount) {
            super(new org.web3j.abi.datatypes.generated.Uint256(index), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(voteCount));
            this.index = index;
            this.name = name;
            this.voteCount = voteCount;
        }

        public Proposal(Uint256 index, Utf8String name, Uint256 voteCount) {
            super(index, name, voteCount);
            this.index = index.getValue();
            this.name = name.getValue();
            this.voteCount = voteCount.getValue();
        }
    }

    public static class Voter extends StaticStruct {
        public Boolean isRegistered;

        public Boolean hasVoted;

        public BigInteger vote;

        public Voter(Boolean isRegistered, Boolean hasVoted, BigInteger vote) {
            super(new org.web3j.abi.datatypes.Bool(isRegistered), 
                    new org.web3j.abi.datatypes.Bool(hasVoted), 
                    new org.web3j.abi.datatypes.generated.Uint256(vote));
            this.isRegistered = isRegistered;
            this.hasVoted = hasVoted;
            this.vote = vote;
        }

        public Voter(Bool isRegistered, Bool hasVoted, Uint256 vote) {
            super(isRegistered, hasVoted, vote);
            this.isRegistered = isRegistered.getValue();
            this.hasVoted = hasVoted.getValue();
            this.vote = vote.getValue();
        }
    }

    public static class BallotCreatedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public String title;
    }

    public static class BallotResultFinalizedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public List<BigInteger> resultProposalIds;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public BigInteger proposalId;

        public String name;
    }

    public static class VoteRecordedEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger ballotId;

        public BigInteger proposalId;
    }
}
