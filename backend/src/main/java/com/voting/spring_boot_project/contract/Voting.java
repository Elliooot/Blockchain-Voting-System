package com.voting.spring_boot_project.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 */
@SuppressWarnings("rawtypes")
public class Voting extends Contract {
    public static final String BINARY = "60806040526001600355348015601457600080fd5b506130ce806100246000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638f47b1461161008c578063aba2100911610066578063aba210091461028a578063b384abef146102ba578063d3c9a741146102d6578063dc6bfbb5146102f2576100ea565b80638f47b1461461020e57806394c790bb1461023e578063995e43391461025a576100ea565b806355b7c597116100c857806355b7c597146101435780635c632b38146101755780637465e7d4146101ac5780638a241f4c146101de576100ea565b8063051097ef146100ef57806311bb51a41461010b5780632ec7d5ae14610127575b600080fd5b61010960048036038101906101049190611de5565b610310565b005b61012560048036038101906101209190612048565b6104fb565b005b610141600480360381019061013c9190612117565b61099b565b005b61015d60048036038101906101589190612144565b610d99565b60405161016c93929190612212565b60405180910390f35b61018f600480360381019061018a9190612117565b610e58565b6040516101a398979695949392919061227a565b60405180910390f35b6101c660048036038101906101c19190612306565b610fdd565b6040516101d593929190612346565b60405180910390f35b6101f860048036038101906101f39190612117565b61102e565b604051610205919061243b565b60405180910390f35b61022860048036038101906102239190612306565b6111d5565b60405161023591906124ae565b60405180910390f35b61025860048036038101906102539190612306565b611280565b005b610274600480360381019061026f9190612117565b611559565b60405161028191906124c9565b60405180910390f35b6102a4600480360381019061029f9190612144565b6116d4565b6040516102b19190612585565b60405180910390f35b6102d460048036038101906102cf9190612144565b6117b9565b005b6102f060048036038101906102eb9190612117565b611b33565b005b6102fa611c09565b60405161030791906125a7565b60405180910390f35b8160008082815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab90612634565b60405180910390fd5b826000806000838152602001908152602001600020905080600201544210610411576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610408906126a0565b60405180910390fd5b600080600087815260200190815260200160002090506000816007015490506040518060600160405280828152602001878152602001600081525060026000898152602001908152602001600020600083815260200190815260200160002060008201518160000155602082015181600101908161048f91906128cc565b50604082015181600201559050508160070160008154809291906104b2906129cd565b91905055507f7aade497c2cd4241d757f694370d0e4a250bfa251b3ab287406b2ab58d3fdad68782886040516104ea93929190612a15565b60405180910390a150505050505050565b42841161053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053490612a9f565b60405180910390fd5b6001825111610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890612b0b565b60405180910390fd5b60008151116105c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90612b77565b60405180910390fd5b6000600360008154809291906105da906129cd565b919050559050600080600083815260200190815260200160002090508181600001819055508681600101908161061091906128cc565b5085816002018190555084816003018190555060008160040160006101000a81548160ff0219169083151502179055506040518060200160405280600081525081600501908161066091906128cc565b50338160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508351816007018190555060005b84518110156107a35760405180606001604052808281526020018683815181106106de576106dd612b97565b5b60200260200101518152602001600081525060026000858152602001908152602001600020600083815260200190815260200160002060008201518160000155602082015181600101908161073391906128cc565b50604082015181600201559050507f7aade497c2cd4241d757f694370d0e4a250bfa251b3ab287406b2ab58d3fdad6838287848151811061077757610776612b97565b5b602002602001015160405161078e93929190612a15565b60405180910390a180806001019150506106b1565b5060005b83518110156109585760008482815181106107c5576107c4612b97565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083590612c12565b60405180910390fd5b6001600085815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690612c7e565b60405180910390fd5b600180600086815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505080806001019150506107a7565b507f0db6f49479669554c6eefe11608543e654d387ff0d23b6b36f365fd261f6a4e0828860405161098a929190612c9e565b60405180910390a150505050505050565b8060008082815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3690612634565b60405180910390fd5b816000806000838152602001908152602001600020905080600301548160020154610a6a9190612cce565b421015610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa390612d4e565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff1615610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790612dba565b60405180910390fd5b60008080600088815260200190815260200160002060070154905060008167ffffffffffffffff811115610b4757610b46611cba565b5b604051908082528060200260200182016040528015610b755781602001602082028036833780820191505090505b5090506000606060005b84811015610c755785600260008d81526020019081526020016000206000838152602001908152602001600020600201541115610c0a57600260008c815260200190815260200160002060008281526020019081526020016000206002015495508084600081518110610bf557610bf4612b97565b5b60200260200101818152505060019250610c68565b85600260008d815260200190815260200160002060008381526020019081526020016000206002015403610c675780848481518110610c4c57610c4b612b97565b5b6020026020010181815250508280610c63906129cd565b9350505b5b8080600101915050610b7f565b5060405180602001604052806000815250905060005b82811015610d30576000811115610cbf5781604051602001610cad9190612e62565b60405160208183030381529060405291505b81600260008d81526020019081526020016000206000868481518110610ce857610ce7612b97565b5b60200260200101518152602001908152602001600020600101604051602001610d12929190612f07565b60405160208183030381529060405291508080600101915050610c8b565b50806000808c81526020019081526020016000206005019081610d5391906128cc565b507fd72f3577ccf1f68bd8f20b9b6168cbfc0d87103a869e3520387f399067397ff38a82604051610d85929190612c9e565b60405180910390a150505050505050505050565b600260205281600052604060002060205280600052604060002060009150915050806000015490806001018054610dcf906126ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb906126ef565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b5050505050908060020154905083565b6000602052806000526040600020600091509050806000015490806001018054610e81906126ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610ead906126ef565b8015610efa5780601f10610ecf57610100808354040283529160200191610efa565b820191906000526020600020905b815481529060010190602001808311610edd57829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff1690806005018054610f2e906126ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5a906126ef565b8015610fa75780601f10610f7c57610100808354040283529160200191610fa7565b820191906000526020600020905b815481529060010190602001808311610f8a57829003601f168201915b5050505050908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070154905088565b6001602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b606081600080600083815260200190815260200160002090508060030154816002015461105b9190612cce565b42101561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490612d4e565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff1615611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890612dba565b60405180910390fd5b600080600087815260200190815260200160002060070154905060008167ffffffffffffffff81111561113757611136611cba565b5b6040519080825280602002602001820160405280156111655781602001602082028036833780820191505090505b50905060005b828110156111c757600260008981526020019081526020016000206000828152602001908152602001600020600201548282815181106111ae576111ad612b97565b5b602002602001018181525050808060010191505061116b565b508095505050505050919050565b6111dd611c0f565b6001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff16151515158152602001600182015481525050905092915050565b8160008082815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131b90612634565b60405180910390fd5b826000806000838152602001908152602001600020905080600201544210611381576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611378906126a0565b60405180910390fd5b6001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990612c7e565b60405180910390fd5b600180600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006001600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555060006001600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050505050565b60608160008060008381526020019081526020016000209050806003015481600201546115869190612cce565b4210156115c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bf90612d4e565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff161561162c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162390612dba565b60405180910390fd5b600080868152602001908152602001600020600501805461164c906126ef565b80601f0160208091040260200160405190810160405280929190818152602001828054611678906126ef565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b50505050509350505050919050565b6116dc611c34565b60026000848152602001908152602001600020600083815260200190815260200160002060405180606001604052908160008201548152602001600182018054611725906126ef565b80601f0160208091040260200160405190810160405280929190818152602001828054611751906126ef565b801561179e5780601f106117735761010080835404028352916020019161179e565b820191906000526020600020905b81548152906001019060200180831161178157829003601f168201915b50505050508152602001600282015481525050905092915050565b8160008060008381526020019081526020016000209050806002015442101580156117f65750806003015481600201546117f39190612cce565b42105b611835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182c90612f77565b60405180910390fd5b8360008082815260200190815260200160002060040160009054906101000a900460ff1615611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189090612dba565b60405180910390fd5b6001600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16611939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193090612fe3565b60405180910390fd5b6001600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16156119da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d19061304f565b60405180910390fd5b600180600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550836001600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060016002600087815260200190815260200160002060008681526020019081526020016000206002016000828254611ad59190612cce565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f30befe21dd895620c3a73403f6e63aea5c3c6729202dbdc8eef2e8f8bd78de808686604051611b2492919061306f565b60405180910390a25050505050565b8060008082815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bce90612634565b60405180910390fd5b600160008084815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505050565b60035481565b6040518060600160405280600015158152602001600015158152602001600081525090565b60405180606001604052806000815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611c7c81611c69565b8114611c8757600080fd5b50565b600081359050611c9981611c73565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cf282611ca9565b810181811067ffffffffffffffff82111715611d1157611d10611cba565b5b80604052505050565b6000611d24611c55565b9050611d308282611ce9565b919050565b600067ffffffffffffffff821115611d5057611d4f611cba565b5b611d5982611ca9565b9050602081019050919050565b82818337600083830152505050565b6000611d88611d8384611d35565b611d1a565b905082815260208101848484011115611da457611da3611ca4565b5b611daf848285611d66565b509392505050565b600082601f830112611dcc57611dcb611c9f565b5b8135611ddc848260208601611d75565b91505092915050565b60008060408385031215611dfc57611dfb611c5f565b5b6000611e0a85828601611c8a565b925050602083013567ffffffffffffffff811115611e2b57611e2a611c64565b5b611e3785828601611db7565b9150509250929050565b600067ffffffffffffffff821115611e5c57611e5b611cba565b5b602082029050602081019050919050565b600080fd5b6000611e85611e8084611e41565b611d1a565b90508083825260208201905060208402830185811115611ea857611ea7611e6d565b5b835b81811015611eef57803567ffffffffffffffff811115611ecd57611ecc611c9f565b5b808601611eda8982611db7565b85526020850194505050602081019050611eaa565b5050509392505050565b600082601f830112611f0e57611f0d611c9f565b5b8135611f1e848260208601611e72565b91505092915050565b600067ffffffffffffffff821115611f4257611f41611cba565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f7e82611f53565b9050919050565b611f8e81611f73565b8114611f9957600080fd5b50565b600081359050611fab81611f85565b92915050565b6000611fc4611fbf84611f27565b611d1a565b90508083825260208201905060208402830185811115611fe757611fe6611e6d565b5b835b818110156120105780611ffc8882611f9c565b845260208401935050602081019050611fe9565b5050509392505050565b600082601f83011261202f5761202e611c9f565b5b813561203f848260208601611fb1565b91505092915050565b600080600080600060a0868803121561206457612063611c5f565b5b600086013567ffffffffffffffff81111561208257612081611c64565b5b61208e88828901611db7565b955050602061209f88828901611c8a565b94505060406120b088828901611c8a565b935050606086013567ffffffffffffffff8111156120d1576120d0611c64565b5b6120dd88828901611ef9565b925050608086013567ffffffffffffffff8111156120fe576120fd611c64565b5b61210a8882890161201a565b9150509295509295909350565b60006020828403121561212d5761212c611c5f565b5b600061213b84828501611c8a565b91505092915050565b6000806040838503121561215b5761215a611c5f565b5b600061216985828601611c8a565b925050602061217a85828601611c8a565b9150509250929050565b61218d81611c69565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121cd5780820151818401526020810190506121b2565b60008484015250505050565b60006121e482612193565b6121ee818561219e565b93506121fe8185602086016121af565b61220781611ca9565b840191505092915050565b60006060820190506122276000830186612184565b818103602083015261223981856121d9565b90506122486040830184612184565b949350505050565b60008115159050919050565b61226581612250565b82525050565b61227481611f73565b82525050565b600061010082019050612290600083018b612184565b81810360208301526122a2818a6121d9565b90506122b16040830189612184565b6122be6060830188612184565b6122cb608083018761225c565b81810360a08301526122dd81866121d9565b90506122ec60c083018561226b565b6122f960e0830184612184565b9998505050505050505050565b6000806040838503121561231d5761231c611c5f565b5b600061232b85828601611c8a565b925050602061233c85828601611f9c565b9150509250929050565b600060608201905061235b600083018661225c565b612368602083018561225c565b6123756040830184612184565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123b281611c69565b82525050565b60006123c483836123a9565b60208301905092915050565b6000602082019050919050565b60006123e88261237d565b6123f28185612388565b93506123fd83612399565b8060005b8381101561242e57815161241588826123b8565b9750612420836123d0565b925050600181019050612401565b5085935050505092915050565b6000602082019050818103600083015261245581846123dd565b905092915050565b61246681612250565b82525050565b606082016000820151612482600085018261245d565b506020820151612495602085018261245d565b5060408201516124a860408501826123a9565b50505050565b60006060820190506124c3600083018461246c565b92915050565b600060208201905081810360008301526124e381846121d9565b905092915050565b600082825260208201905092915050565b600061250782612193565b61251181856124eb565b93506125218185602086016121af565b61252a81611ca9565b840191505092915050565b600060608301600083015161254d60008601826123a9565b506020830151848203602086015261256582826124fc565b915050604083015161257a60408601826123a9565b508091505092915050565b6000602082019050818103600083015261259f8184612535565b905092915050565b60006020820190506125bc6000830184612184565b92915050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b600061261e60228361219e565b9150612629826125c2565b604082019050919050565b6000602082019050818103600083015261264d81612611565b9050919050565b7f566f74696e672068617320616c72656164792073746172746564000000000000600082015250565b600061268a601a8361219e565b915061269582612654565b602082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270757607f821691505b60208210810361271a576127196126c0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612745565b61278c8683612745565b95508019841693508086168417925050509392505050565b6000819050919050565b60006127c96127c46127bf84611c69565b6127a4565b611c69565b9050919050565b6000819050919050565b6127e3836127ae565b6127f76127ef826127d0565b848454612752565b825550505050565b600090565b61280c6127ff565b6128178184846127da565b505050565b5b8181101561283b57612830600082612804565b60018101905061281d565b5050565b601f8211156128805761285181612720565b61285a84612735565b81016020851015612869578190505b61287d61287585612735565b83018261281c565b50505b505050565b600082821c905092915050565b60006128a360001984600802612885565b1980831691505092915050565b60006128bc8383612892565b9150826002028217905092915050565b6128d582612193565b67ffffffffffffffff8111156128ee576128ed611cba565b5b6128f882546126ef565b61290382828561283f565b600060209050601f8311600181146129365760008415612924578287015190505b61292e85826128b0565b865550612996565b601f19841661294486612720565b60005b8281101561296c57848901518255600182019150602085019450602081019050612947565b868310156129895784890151612985601f891682612892565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129d882611c69565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0a57612a0961299e565b5b600182019050919050565b6000606082019050612a2a6000830186612184565b612a376020830185612184565b8181036040830152612a4981846121d9565b9050949350505050565b7f53746172742074696d65206d75737420626520696e2074686520667574757265600082015250565b6000612a8960208361219e565b9150612a9482612a53565b602082019050919050565b60006020820190508181036000830152612ab881612a7c565b9050919050565b7f4d7573742068617665206174206c656173742074776f2070726f706f73616c73600082015250565b6000612af560208361219e565b9150612b0082612abf565b602082019050919050565b60006020820190508181036000830152612b2481612ae8565b9050919050565b7f4d7573742068617665206174206c65617374206f6e6520766f74657200000000600082015250565b6000612b61601c8361219e565b9150612b6c82612b2b565b602082019050919050565b60006020820190508181036000830152612b9081612b54565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e76616c696420766f74657220616464726573730000000000000000000000600082015250565b6000612bfc60158361219e565b9150612c0782612bc6565b602082019050919050565b60006020820190508181036000830152612c2b81612bef565b9050919050565b7f566f74657220697320616c726561647920726567697374657265640000000000600082015250565b6000612c68601b8361219e565b9150612c7382612c32565b602082019050919050565b60006020820190508181036000830152612c9781612c5b565b9050919050565b6000604082019050612cb36000830185612184565b8181036020830152612cc581846121d9565b90509392505050565b6000612cd982611c69565b9150612ce483611c69565b9250828201905080821115612cfc57612cfb61299e565b5b92915050565b7f566f74696e6720706572696f6420686173206e6f7420656e6465642079657400600082015250565b6000612d38601f8361219e565b9150612d4382612d02565b602082019050919050565b60006020820190508181036000830152612d6781612d2b565b9050919050565b7f566f74696e67206973207465726d696e61746564000000000000000000000000600082015250565b6000612da460148361219e565b9150612daf82612d6e565b602082019050919050565b60006020820190508181036000830152612dd381612d97565b9050919050565b600081905092915050565b6000612df082612193565b612dfa8185612dda565b9350612e0a8185602086016121af565b80840191505092915050565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b6000612e4c600283612dda565b9150612e5782612e16565b600282019050919050565b6000612e6e8284612de5565b9150612e7982612e3f565b915081905092915050565b60008154612e91816126ef565b612e9b8186612dda565b94506001821660008114612eb65760018114612ecb57612efe565b60ff1983168652811515820286019350612efe565b612ed485612720565b60005b83811015612ef657815481890152600182019150602081019050612ed7565b838801955050505b50505092915050565b6000612f138285612de5565b9150612f1f8284612e84565b91508190509392505050565b7f566f74696e67206973206e6f7420616374697665000000000000000000000000600082015250565b6000612f6160148361219e565b9150612f6c82612f2b565b602082019050919050565b60006020820190508181036000830152612f9081612f54565b9050919050565b7f596f75206d757374206265207265676973746572656420746f20766f74650000600082015250565b6000612fcd601e8361219e565b9150612fd882612f97565b602082019050919050565b60006020820190508181036000830152612ffc81612fc0565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b600061303960168361219e565b915061304482613003565b602082019050919050565b600060208201905081810360008301526130688161302c565b9050919050565b60006040820190506130846000830185612184565b6130916020830184612184565b939250505056fea26469706673582212200c38e762f58c6095f511acc05bfcf290c3a3fa3c1ae930c4b8fd060871f12cfa64736f6c634300081c0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDPROPOSAL = "addProposal";

    public static final String FUNC_BALLOTS = "ballots";

    public static final String FUNC_CREATEBALLOT = "createBallot";

    public static final String FUNC_FINALIZERESULT = "finalizeResult";

    public static final String FUNC_GETPROPOSAL = "getProposal";

    public static final String FUNC_GETRESULT = "getResult";

    public static final String FUNC_GETVOTECOUNTS = "getVoteCounts";

    public static final String FUNC_GETVOTER = "getVoter";

    public static final String FUNC_NEXTBALLOTID = "nextBallotId";

    public static final String FUNC_PROPOSALSBYBALLOT = "proposalsByBallot";

    public static final String FUNC_REGISTERVOTER = "registerVoter";

    public static final String FUNC_TERMINATEVOTING = "terminateVoting";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERSBYBALLOT = "votersByBallot";

    public static final Event BALLOTCREATED_EVENT = new Event("BallotCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BALLOTRESULTFINALIZED_EVENT = new Event("BallotResultFinalized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PROPOSALCREATED_EVENT = new Event("ProposalCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VOTERECORDED_EVENT = new Event("VoteRecorded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<BallotCreatedEventResponse> getBallotCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BALLOTCREATED_EVENT, transactionReceipt);
        ArrayList<BallotCreatedEventResponse> responses = new ArrayList<BallotCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BallotCreatedEventResponse typedResponse = new BallotCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BallotCreatedEventResponse getBallotCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BALLOTCREATED_EVENT, log);
        BallotCreatedEventResponse typedResponse = new BallotCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BallotCreatedEventResponse> ballotCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBallotCreatedEventFromLog(log));
    }

    public Flowable<BallotCreatedEventResponse> ballotCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALLOTCREATED_EVENT));
        return ballotCreatedEventFlowable(filter);
    }

    public static List<BallotResultFinalizedEventResponse> getBallotResultFinalizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BALLOTRESULTFINALIZED_EVENT, transactionReceipt);
        ArrayList<BallotResultFinalizedEventResponse> responses = new ArrayList<BallotResultFinalizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BallotResultFinalizedEventResponse typedResponse = new BallotResultFinalizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.result = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BallotResultFinalizedEventResponse getBallotResultFinalizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BALLOTRESULTFINALIZED_EVENT, log);
        BallotResultFinalizedEventResponse typedResponse = new BallotResultFinalizedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.result = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BallotResultFinalizedEventResponse> ballotResultFinalizedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBallotResultFinalizedEventFromLog(log));
    }

    public Flowable<BallotResultFinalizedEventResponse> ballotResultFinalizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALLOTRESULTFINALIZED_EVENT));
        return ballotResultFinalizedEventFlowable(filter);
    }

    public static List<ProposalCreatedEventResponse> getProposalCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, transactionReceipt);
        ArrayList<ProposalCreatedEventResponse> responses = new ArrayList<ProposalCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProposalCreatedEventResponse getProposalCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROPOSALCREATED_EVENT, log);
        ProposalCreatedEventResponse typedResponse = new ProposalCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProposalCreatedEventFromLog(log));
    }

    public Flowable<ProposalCreatedEventResponse> proposalCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROPOSALCREATED_EVENT));
        return proposalCreatedEventFlowable(filter);
    }

    public static List<VoteRecordedEventResponse> getVoteRecordedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTERECORDED_EVENT, transactionReceipt);
        ArrayList<VoteRecordedEventResponse> responses = new ArrayList<VoteRecordedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteRecordedEventResponse typedResponse = new VoteRecordedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VoteRecordedEventResponse getVoteRecordedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTERECORDED_EVENT, log);
        VoteRecordedEventResponse typedResponse = new VoteRecordedEventResponse();
        typedResponse.log = log;
        typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ballotId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.proposalId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VoteRecordedEventResponse> voteRecordedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVoteRecordedEventFromLog(log));
    }

    public Flowable<VoteRecordedEventResponse> voteRecordedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTERECORDED_EVENT));
        return voteRecordedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addProposal(BigInteger _ballotId, String _name) {
        final Function function = new Function(
                FUNC_ADDPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, BigInteger, BigInteger, Boolean, String, String, BigInteger>> ballots(
            BigInteger param0) {
        final Function function = new Function(FUNC_BALLOTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, BigInteger, BigInteger, Boolean, String, String, BigInteger>>(function,
                new Callable<Tuple8<BigInteger, String, BigInteger, BigInteger, Boolean, String, String, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, String, BigInteger, BigInteger, Boolean, String, String, BigInteger> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, BigInteger, BigInteger, Boolean, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createBallot(String _title, BigInteger _startTime,
            BigInteger _duration, List<String> _proposalNames, List<String> _voters) {
        final Function function = new Function(
                FUNC_CREATEBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(_duration), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_proposalNames, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_voters, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeResult(BigInteger _ballotId) {
        final Function function = new Function(
                FUNC_FINALIZERESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Proposal> getProposal(BigInteger _ballotId, BigInteger _proposalId) {
        final Function function = new Function(FUNC_GETPROPOSAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Proposal>() {}));
        return executeRemoteCallSingleValueReturn(function, Proposal.class);
    }

    public RemoteFunctionCall<String> getResult(BigInteger _ballotId) {
        final Function function = new Function(FUNC_GETRESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getVoteCounts(BigInteger _ballotId) {
        final Function function = new Function(FUNC_GETVOTECOUNTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Voter> getVoter(BigInteger _ballotId, String _voterAddress) {
        final Function function = new Function(FUNC_GETVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Address(160, _voterAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Voter>() {}));
        return executeRemoteCallSingleValueReturn(function, Voter.class);
    }

    public RemoteFunctionCall<BigInteger> nextBallotId() {
        final Function function = new Function(FUNC_NEXTBALLOTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>> proposalsByBallot(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_PROPOSALSBYBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> registerVoter(BigInteger _ballotId,
            String voter) {
        final Function function = new Function(
                FUNC_REGISTERVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.Address(160, voter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> terminateVoting(BigInteger _ballotId) {
        final Function function = new Function(
                FUNC_TERMINATEVOTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _ballotId,
            BigInteger _proposalId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ballotId), 
                new org.web3j.abi.datatypes.generated.Uint256(_proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<Boolean, Boolean, BigInteger>> votersByBallot(
            BigInteger param0, String param1) {
        final Function function = new Function(FUNC_VOTERSBYBALLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<Boolean, Boolean, BigInteger>>(function,
                new Callable<Tuple3<Boolean, Boolean, BigInteger>>() {
                    @Override
                    public Tuple3<Boolean, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voting load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Proposal extends DynamicStruct {
        public BigInteger index;

        public String name;

        public BigInteger voteCount;

        public Proposal(BigInteger index, String name, BigInteger voteCount) {
            super(new org.web3j.abi.datatypes.generated.Uint256(index), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(voteCount));
            this.index = index;
            this.name = name;
            this.voteCount = voteCount;
        }

        public Proposal(Uint256 index, Utf8String name, Uint256 voteCount) {
            super(index, name, voteCount);
            this.index = index.getValue();
            this.name = name.getValue();
            this.voteCount = voteCount.getValue();
        }
    }

    public static class Voter extends StaticStruct {
        public Boolean isRegistered;

        public Boolean hasVoted;

        public BigInteger vote;

        public Voter(Boolean isRegistered, Boolean hasVoted, BigInteger vote) {
            super(new org.web3j.abi.datatypes.Bool(isRegistered), 
                    new org.web3j.abi.datatypes.Bool(hasVoted), 
                    new org.web3j.abi.datatypes.generated.Uint256(vote));
            this.isRegistered = isRegistered;
            this.hasVoted = hasVoted;
            this.vote = vote;
        }

        public Voter(Bool isRegistered, Bool hasVoted, Uint256 vote) {
            super(isRegistered, hasVoted, vote);
            this.isRegistered = isRegistered.getValue();
            this.hasVoted = hasVoted.getValue();
            this.vote = vote.getValue();
        }
    }

    public static class BallotCreatedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public String title;
    }

    public static class BallotResultFinalizedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public String result;
    }

    public static class ProposalCreatedEventResponse extends BaseEventResponse {
        public BigInteger ballotId;

        public BigInteger proposalId;

        public String name;
    }

    public static class VoteRecordedEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger ballotId;

        public BigInteger proposalId;
    }
}
